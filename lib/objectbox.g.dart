// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'rupee_object_data_model.dart';
import 'profile_object_data_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4850328478320768766),
      name: 'ProfileObjectModel',
      lastPropertyId: const obx_int.IdUid(9, 6614749700073237402),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1927258536169094875),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4112269246319900304),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4028117535479744305),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5457077896235989577),
            name: 'emailId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3655017867095592189),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1273680390665240934),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6472891423127616996),
            name: 'countryCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4053432137560577797),
            name: 'age',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6614749700073237402),
            name: 'isSynced',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1734922640630762035),
      name: 'RupeeObjectDataModel',
      lastPropertyId: const obx_int.IdUid(12, 3943863301210245284),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7625509108890213151),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7075325923841843624),
            name: 'userId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6877547023478587009),
            name: 'rupeeId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6496507223995453687),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5609595802906630377),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1089745204257574684),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4464743645568287399),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3770251970081202184),
            name: 'day',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2040227657326435021),
            name: 'month',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1426379049228627075),
            name: 'year',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2268341993066158905),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3943863301210245284),
            name: 'isSynced',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 1734922640630762035),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ProfileObjectModel: obx_int.EntityDefinition<ProfileObjectModel>(
        model: _entities[0],
        toOneRelations: (ProfileObjectModel object) => [],
        toManyRelations: (ProfileObjectModel object) => {},
        getId: (ProfileObjectModel object) => object.id,
        setId: (ProfileObjectModel object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileObjectModel object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final emailIdOffset =
              object.emailId == null ? null : fbb.writeString(object.emailId!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final countryCodeOffset = object.countryCode == null
              ? null
              : fbb.writeString(object.countryCode!);
          final ageOffset =
              object.age == null ? null : fbb.writeString(object.age!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, emailIdOffset);
          fbb.addOffset(4, phoneNumberOffset);
          fbb.addOffset(5, imageUrlOffset);
          fbb.addOffset(6, countryCodeOffset);
          fbb.addOffset(7, ageOffset);
          fbb.addBool(8, object.isSynced);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final emailIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final countryCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final ageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final isSyncedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final object = ProfileObjectModel(
              userId: userIdParam,
              name: nameParam,
              emailId: emailIdParam,
              imageUrl: imageUrlParam,
              phoneNumber: phoneNumberParam,
              countryCode: countryCodeParam,
              age: ageParam,
              isSynced: isSyncedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    RupeeObjectDataModel: obx_int.EntityDefinition<RupeeObjectDataModel>(
        model: _entities[1],
        toOneRelations: (RupeeObjectDataModel object) => [],
        toManyRelations: (RupeeObjectDataModel object) => {},
        getId: (RupeeObjectDataModel object) => object.id,
        setId: (RupeeObjectDataModel object, int id) {
          object.id = id;
        },
        objectToFB: (RupeeObjectDataModel object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId ?? '');
          final rupeeIdOffset = fbb.writeString(object.rupeeId ?? '');
          final titleOffset = fbb.writeString(object.title ?? '');
          final descriptionOffset = fbb.writeString(object.description ?? '');
          final typeOffset = fbb.writeString(object.type ?? '');
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, rupeeIdOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addInt64(5, object.date?.millisecondsSinceEpoch);
          fbb.addFloat64(6, object.amount);
          fbb.addInt64(7, object.day);
          fbb.addInt64(8, object.month);
          fbb.addInt64(9, object.year);
          fbb.addOffset(10, typeOffset);
          fbb.addBool(11, object.isSynced);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final rupeeIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final dayParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final monthParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final yearParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final object = RupeeObjectDataModel(
              rupeeId: rupeeIdParam,
              userId: userIdParam,
              title: titleParam,
              date: dateParam,
              description: descriptionParam,
              amount: amountParam,
              day: dayParam,
              month: monthParam,
              year: yearParam,
              type: typeParam,
              isSynced: isSyncedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ProfileObjectModel] entity fields to define ObjectBox queries.
class ProfileObjectModel_ {
  /// See [ProfileObjectModel.id].
  static final id =
      obx.QueryIntegerProperty<ProfileObjectModel>(_entities[0].properties[0]);

  /// See [ProfileObjectModel.userId].
  static final userId =
      obx.QueryStringProperty<ProfileObjectModel>(_entities[0].properties[1]);

  /// See [ProfileObjectModel.name].
  static final name =
      obx.QueryStringProperty<ProfileObjectModel>(_entities[0].properties[2]);

  /// See [ProfileObjectModel.emailId].
  static final emailId =
      obx.QueryStringProperty<ProfileObjectModel>(_entities[0].properties[3]);

  /// See [ProfileObjectModel.phoneNumber].
  static final phoneNumber =
      obx.QueryStringProperty<ProfileObjectModel>(_entities[0].properties[4]);

  /// See [ProfileObjectModel.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<ProfileObjectModel>(_entities[0].properties[5]);

  /// See [ProfileObjectModel.countryCode].
  static final countryCode =
      obx.QueryStringProperty<ProfileObjectModel>(_entities[0].properties[6]);

  /// See [ProfileObjectModel.age].
  static final age =
      obx.QueryStringProperty<ProfileObjectModel>(_entities[0].properties[7]);

  /// See [ProfileObjectModel.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<ProfileObjectModel>(_entities[0].properties[8]);
}

/// [RupeeObjectDataModel] entity fields to define ObjectBox queries.
class RupeeObjectDataModel_ {
  /// See [RupeeObjectDataModel.id].
  static final id = obx.QueryIntegerProperty<RupeeObjectDataModel>(
      _entities[1].properties[0]);

  /// See [RupeeObjectDataModel.userId].
  static final userId =
      obx.QueryStringProperty<RupeeObjectDataModel>(_entities[1].properties[1]);

  /// See [RupeeObjectDataModel.rupeeId].
  static final rupeeId =
      obx.QueryStringProperty<RupeeObjectDataModel>(_entities[1].properties[2]);

  /// See [RupeeObjectDataModel.title].
  static final title =
      obx.QueryStringProperty<RupeeObjectDataModel>(_entities[1].properties[3]);

  /// See [RupeeObjectDataModel.description].
  static final description =
      obx.QueryStringProperty<RupeeObjectDataModel>(_entities[1].properties[4]);

  /// See [RupeeObjectDataModel.date].
  static final date =
      obx.QueryDateProperty<RupeeObjectDataModel>(_entities[1].properties[5]);

  /// See [RupeeObjectDataModel.amount].
  static final amount =
      obx.QueryDoubleProperty<RupeeObjectDataModel>(_entities[1].properties[6]);

  /// See [RupeeObjectDataModel.day].
  static final day = obx.QueryIntegerProperty<RupeeObjectDataModel>(
      _entities[1].properties[7]);

  /// See [RupeeObjectDataModel.month].
  static final month = obx.QueryIntegerProperty<RupeeObjectDataModel>(
      _entities[1].properties[8]);

  /// See [RupeeObjectDataModel.year].
  static final year = obx.QueryIntegerProperty<RupeeObjectDataModel>(
      _entities[1].properties[9]);

  /// See [RupeeObjectDataModel.type].
  static final type = obx.QueryStringProperty<RupeeObjectDataModel>(
      _entities[1].properties[10]);

  /// See [RupeeObjectDataModel.isSynced].
  static final isSynced = obx.QueryBooleanProperty<RupeeObjectDataModel>(
      _entities[1].properties[11]);
}
